bun test v1.2.4 (fd9a5ea6)

test/comprehensive_object_debug.test.ts:
Initial result: true
After change result: false
(pass) CE Helper Debug Tests > ce_eq should propagate changes correctly [5.21ms]
Initial result: true
After change result: false
(pass) CE Helper Debug Tests > ce_and should propagate changes correctly [1.47ms]
Initial result: false
After change result: true
(pass) CE Helper Debug Tests > ce_not should propagate changes correctly [2.06ms]
Initial result: &&the_nothing&&
After change result: hello
(pass) CE Helper Debug Tests > ce_gate should propagate changes correctly [1.08ms]

test/patchSystem.test.ts:

test/test_abstraction_level_and_traversal.test.ts:
40 |         const rootRelation = get_global_parent();
41 |         expect(rootRelation.get_level()).toBe(0);
42 | 
43 |         // Create cells at root level
44 |         const rootCell = construct_cell("root_cell");
45 |         expect(cell_level(rootCell)).toBe(0);
                                          ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:45:38)
(fail) Abstraction Level and Traversal Tests > cells maintain correct abstraction levels in different contexts [0.67ms]
75 |                 output.addContent(input.getStrongest());
76 |             },
77 |             "root_propagator"
78 |         );
79 | 
80 |         expect(propagator_level(rootPropagator)).toBe(0);
                                                      ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:80:50)
(fail) Abstraction Level and Traversal Tests > propagators maintain correct abstraction levels [0.58ms]
277 | export function propagator_dispose(propagator: Propagator){
278 |     propagator.dispose();
279 | }
280 | 
281 | export function propagator_level(propagator: Propagator): number{
282 |     return propagator.getRelation().get_level();
                            ^
TypeError: propagator.getRelation is not a function. (In 'propagator.getRelation()', 'propagator.getRelation' is undefined)
      at propagator_level (/Users/linpandi/Dropbox/Programs/Propogator/Propagator/Propagator.ts:282:23)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:119:16)
(fail) Abstraction Level and Traversal Tests > function_to_primitive_propagator maintains correct abstraction level [0.35ms]
156 |                 innerProp(innerCell, output);
157 |             },
158 |             "root_compound"
159 |         );
160 | 
161 |         expect(propagator_level(rootCompound)).toBe(0);
                                                     ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:161:48)
(fail) Abstraction Level and Traversal Tests > compound_propagator maintains correct abstraction level [0.31ms]
228 |         expect(result.cells.size).toBe(2); // level0Input and level0Output
229 |         expect(result.propagators.size).toBe(1); // level0Prop
230 | 
231 |         // Verify the found items are actually level 0
232 |         for (const [id, cell] of result.cells) {
233 |             expect(cell_level(cell)).toBe(0);
                                           ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:233:38)
(fail) Abstraction Level and Traversal Tests > traverse_with_level(0) finds only level 0 cells and propagators [0.79ms]
266 |         expect(result.cells.size).toBe(2); // level1Input and level1Output
267 |         expect(result.propagators.size).toBe(1); // level1Prop
268 | 
269 |         // Verify the found items are actually level 1
270 |         for (const [id, cell] of result.cells) {
271 |             expect(cell_level(cell)).toBe(1);
                                           ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:271:38)
(fail) Abstraction Level and Traversal Tests > traverse_with_level(1) finds only level 1 cells and propagators [0.46ms]
310 |         expect(result.cells.size).toBe(3); // a, b, c
311 |         expect(result.propagators.size).toBe(2); // p1, p2
312 | 
313 |         // Verify all found items are level 0
314 |         for (const [id, cell] of result.cells) {
315 |             expect(cell_level(cell)).toBe(0);
                                           ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:315:38)
(fail) Abstraction Level and Traversal Tests > traverse_primitive_level finds only level 0 items [0.58ms]
(pass) Abstraction Level and Traversal Tests > traverse_with_level correctly filters mixed-level networks [0.39ms]
386 |         // Test find_cell_by_id
387 |         const foundCell1 = find_cell_by_id("test_cell_1");
388 |         const foundCell2 = find_cell_by_id("test_cell_2");
389 |         const notFoundCell = find_cell_by_id("nonexistent_cell");
390 | 
391 |         expect(foundCell1).toBe(cell1);
                                 ^
error: expect(received).toBe(expected)

Expected: {
  getRelation: [Function: getRelation],
  getContent: [Function: getContent],
  getStrongest: [Function: getStrongest],
  getNeighbors: [Function: getNeighbors],
  testContent: [Function: testContent],
  addContent: [Function: addContent],
  addNeighbor: [Function: addNeighbor],
  summarize: [Function: summarize],
  dispose: [Function: dispose],
}
Received: undefined

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:391:28)
(fail) Abstraction Level and Traversal Tests > find_cell_by_id and find_propagator_by_id work correctly [0.33ms]
422 |                 expect(propagator_level(innerProp)).toBe(0);
423 |             },
424 |             "outer_compound"
425 |         );
426 | 
427 |         expect(propagator_level(outerCompound)).toBe(0);
                                                      ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_and_traversal.test.ts:427:49)
(fail) Abstraction Level and Traversal Tests > nested compound propagators maintain correct levels [0.23ms]

test/scheduler.test.ts:

test/memory-leak.test.ts:

test/cellvalue.test.ts:
(pass) The Nothing > critic for the nothing should work
(pass) The Contradiction > critic for the contradiction should work [0.15ms]

test/cell.test.ts:

test/object_propagator.test.ts:
49 |       )(cmd);
50 | 
51 |       // Send increment command
52 |       update(cmd, "increment");
53 |       await execute_all_tasks_sequential(() => {});
54 |       expect(cell_strongest_base_value(state)).toBe(1);
                                                    ^
error: expect(received).toBe(expected)

Expected: 1
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:54:48)
(fail) construct_simple_object_propagator > Basic State Management > should update state based on command [4.24ms]
 98 |       )(cmd);
 99 | 
100 |       // Test state transitions
101 |       update(cmd, "start");
102 |       await execute_all_tasks_sequential(() => {});
103 |       expect(cell_strongest_base_value(state)).toBe("loading");
                                                     ^
error: expect(received).toBe(expected)

Expected: "loading"
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:103:48)
(fail) construct_simple_object_propagator > Basic State Management > should handle complex state transitions [4.49ms]
152 |       )(cmd, result);
153 | 
154 |       // Test with result cell
155 |       update(cmd, { op: "add", value: 5 });
156 |       await execute_all_tasks_sequential(() => {});
157 |       expect(cell_strongest_base_value(state)).toBe(5);
                                                     ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:157:48)
(fail) construct_simple_object_propagator > Result Handling > should sync result when result cell is provided [5.26ms]
196 |       )(cmd, result);
197 | 
198 |       // Test with defined result
199 |       update(cmd, "increment");
200 |       await execute_all_tasks_sequential(() => {});
201 |       expect(cell_strongest_base_value(state)).toBe(1);
                                                     ^
error: expect(received).toBe(expected)

Expected: 1
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:201:48)
(fail) construct_simple_object_propagator > Result Handling > should handle undefined results gracefully [4.18ms]
(pass) construct_simple_object_propagator > Edge Cases and Error Handling > should handle empty commands gracefully [2.44ms]
266 |       )(cmd);
267 | 
268 |       // Should still update state correctly
269 |       update(cmd, 5);
270 |       await execute_all_tasks_sequential(() => {});
271 |       expect(cell_strongest_base_value(state)).toBe(5);
                                                     ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:271:48)
(fail) construct_simple_object_propagator > Edge Cases and Error Handling > should work without result cell [2.52ms]
309 |       )(cmd, result);
310 | 
311 |       // Test partial updates
312 |       update(cmd, { age: 31 });
313 |       await execute_all_tasks_sequential(() => {});
314 |       expect(cell_strongest_base_value(state)).toEqual({
                                                     ^
error: expect(received).toEqual(expected)

Expected: [32m{
  name: "John",
  age: 31,
  active: true,
}[0m
Received: [31m"&&the_contradiction&&"[0m

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:314:48)
(fail) construct_simple_object_propagator > Edge Cases and Error Handling > should handle complex object states [2.89ms]
356 |       update(cmd, 1);
357 |       update(cmd, 2);
358 |       update(cmd, 3);
359 | 
360 |       await execute_all_tasks_sequential(() => {});
361 |       expect(cell_strongest_base_value(state)).toBe(6);
                                                     ^
error: expect(received).toBe(expected)

Expected: 6
Received: 0

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:361:48)
(fail) construct_simple_object_propagator > Reactive Behavior > should react to state changes [1.02ms]
389 |       )(cmd2);
390 | 
391 |       // Test that both propagators can update the shared state
392 |       update(cmd1, 5);
393 |       await execute_all_tasks_sequential(() => {});
394 |       expect(cell_strongest_base_value(state)).toBe(5);
                                                     ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator.test.ts:394:48)
(fail) construct_simple_object_propagator > Reactive Behavior > should maintain consistency with multiple propagators [1.99ms]

test/test_debug_lookup.test.ts:
Cell 1 ID: 29507e28-d3c0-4846-979f-2969a896e47f
Cell 2 ID: e22e26cc-4900-4456-aab1-07becfd09659
Found cell 1: undefined
Found cell 2: undefined
41 |         const foundCell2 = find_cell_by_id("test_cell_2");
42 | 
43 |         console.log("Found cell 1:", foundCell1);
44 |         console.log("Found cell 2:", foundCell2);
45 | 
46 |         expect(foundCell1).toBeDefined();
                                ^
error: expect(received).toBeDefined()

Received: undefined

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_debug_lookup.test.ts:46:28)
(fail) Debug Lookup Tests > debug: cell IDs and lookup [0.67ms]
Propagator ID: df3a737f-2828-4ebd-9c01-836505119556
Found propagator: {
  get_name: [Function: get_name],
  getRelation: [Function: getRelation],
  getInputsID: [Function: getInputsID],
  getOutputsID: [Function: getOutputsID],
  summarize: [Function: summarize],
  activate: [Function: activate],
  dispose: [Function: dispose],
}
(pass) Debug Lookup Tests > debug: propagator IDs and lookup [0.94ms]
Cell a ID: b2cebf61-8031-4511-b3d8-f44d895994c1
Cell b ID: 0e10ef0e-2bba-4277-a535-141700db9dbf
Cell c ID: 00c64cdd-bea0-48d3-b724-54db25fe06f3
Propagator p1 ID: 107cc2b5-b1ba-43dd-b92d-20511d5c0324
Propagator p2 ID: bb8f9119-5543-48ff-b628-b7fdcee2dc22
Traversal result cells: [ "b2cebf61-8031-4511-b3d8-f44d895994c1", "0e10ef0e-2bba-4277-a535-141700db9dbf",
  "00c64cdd-bea0-48d3-b724-54db25fe06f3"
]
Traversal result propagators: [ "107cc2b5-b1ba-43dd-b92d-20511d5c0324", "bb8f9119-5543-48ff-b628-b7fdcee2dc22" ]
(pass) Debug Lookup Tests > debug: traverse_primitive_level result [0.67ms]

test/patchSystem_simple.test.ts:

test/abstraction_level.test.ts:
(pass) Abstraction Level Tests > root relation has level 0 [0.01ms]
(pass) Abstraction Level Tests > child relation has parent level + 1 [0.03ms]
(pass) Abstraction Level Tests > nested relations have correct abstraction levels [0.04ms]
(pass) Abstraction Level Tests > propagator created with parameterize_parent gets correct abstraction level [0.17ms]
(pass) Abstraction Level Tests > nested parameterize_parent calls maintain correct abstraction levels [0.18ms]
(pass) Abstraction Level Tests > multiple propagators created in same parameterize_parent context have same abstraction level [0.15ms]
(pass) Abstraction Level Tests > parameterize_parent restores original parent after execution [0.05ms]
(pass) Abstraction Level Tests > propagator activation within parameterize_parent context uses correct abstraction level [0.12ms]
(pass) Abstraction Level Tests > complex nested propagator hierarchy maintains correct abstraction levels [0.11ms]

test/advanceReactive.test.ts:
(pass) Advance Reactive Tests > timestamp set merge tests > timestamp merge should update staled timestamp [0.16ms]
(pass) Advance Reactive Tests > timestamp set merge tests > timestamp should propagate timestamp from multiple sources - A [0.06ms]
(pass) Advance Reactive Tests > timestamp set merge tests > timestamp should propagate timestamp from multiple sources - B [0.04ms]
(pass) Advance Reactive Tests > timestamp set merge tests > timestamp set merge should be able to merge element into empty set [0.05ms]
(pass) Advance Reactive Tests > timestamp set merge tests > multiple timestamp merged with new fresher timestamp should update according to its source id  [0.09ms]
(pass) Advance Reactive Tests > timestamp set merge tests > comprehensive equality check for layered timestamp sets [0.25ms]
(pass) Advance Reactive Tests > timestamp value merge tests > timestamp value merge should update according to its source id  [0.13ms]
259 |     await new Promise((resolve) => setTimeout(resolve, 100))
260 | 
261 |     execute_all_tasks_sequential((error: Error) => {
262 |       console.log(error)
263 |     });
264 |     expect(cell_strongest_base_value(cell_a)).toBe(2)
                                                    ^
error: expect(received).toBe(expected)

Expected: 2
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:264:47)
(fail) Advance Reactive Tests > timestamp value merge tests > integrated test with cell [203.24ms]
(pass) Advance Reactive Tests > Update and subscribe functionality tests > update (no premise) should update a cell with the annotated value [0.32ms]
(pass) Advance Reactive Tests > Update and subscribe functionality tests > update (with premise) should update a cell with support info [0.14ms]
307 |       expect(cell_strongest_base_value(output)).toBe(the_nothing);
308 | 
309 |       update(condition, true);
310 | 
311 |       await execute_all_tasks_sequential((error: Error) => {});
312 |       expect(cell_strongest_base_value(output)).toBe("initial");
                                                      ^
error: expect(received).toBe(expected)

Expected: "initial"
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:312:49)
(fail) Advance Reactive Tests > Non-chainable operators tests > switch operator should output 'then' cell's value when condition is true [0.98ms]
325 | 
326 |       update(input, 2);
327 | 
328 |       await execute_all_tasks_sequential((error: Error) => {console.log(error)});
329 | 
330 |       expect(cell_strongest_base_value(output)).toBe(2);
                                                      ^
error: expect(received).toBe(expected)

Expected: 2
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:330:49)
(fail) Advance Reactive Tests > Non-chainable operators tests > p_sync should update output when input changes [2.03ms]
342 |       update(cellA, "first");
343 |       await execute_all_tasks_sequential((error: Error) => {
344 |         if (error) throw error;
345 |       });
346 |       await new Promise((resolve) => setTimeout(resolve, 1));
347 |       expect(cell_strongest_base_value(output)).toBe("first");
                                                      ^
error: expect(received).toBe(expected)

Expected: "first"
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:347:49)
(fail) Advance Reactive Tests > Non-chainable operators tests > or operator should select the fresher cell value [1.74ms]
370 | 
371 |       update(input, "a");
372 |       update(input, "b");
373 |       update(input, "c");
374 |       await execute_all_tasks_sequential((error: Error) => {});
375 |       expect(cell_strongest_base_value(output)).toBe("c");
                                                      ^
error: expect(received).toBe(expected)

Expected: "c"
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:375:49)
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > p_drop should ignore first N values and pass subsequent ones [0.85ms]
388 |       await execute_all_tasks_sequential((error: Error) => {});
389 |       expect(cell_strongest_base_value(output)).toBe(1);
390 | 
391 |       update(input, 2);
392 |       await execute_all_tasks_sequential((error: Error) => {});
393 |       expect(cell_strongest_base_value(output)).toBe(2);
                                                      ^
error: expect(received).toBe(expected)

Expected: 2
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:393:49)
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > p_drop with 0 should pass all values through [0.83ms]
402 |       await execute_all_tasks_sequential((error: Error) => {});
403 |       expect(cell_strongest_base_value(output)).toBe("x");
404 | 
405 |       update(input, "y");
406 |       await execute_all_tasks_sequential((error: Error) => {});
407 |       expect(cell_strongest_base_value(output)).toBe("y");
                                                      ^
error: expect(received).toBe(expected)

Expected: "y"
Received: "x"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:407:49)
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > p_take should emit first N values then stop (no_compute) [0.64ms]
(pass) Advance Reactive Tests > p_drop / p_take / p_first tests > p_first should only pass the first value [0.39ms]
443 |       // take more than provided: should take whatever comes until N consumed
444 |       p_take(5)(inputB, outB);
445 |       update(inputB, 1);
446 |       update(inputB, 2);
447 |       await execute_all_tasks_sequential((error: Error) => {});
448 |       expect(cell_strongest_base_value(outB)).toBe(2);
                                                    ^
error: expect(received).toBe(expected)

Expected: 2
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:448:47)
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > edge cases: negative and oversized counts [0.56ms]
applyPipeTest
5
cell name:#temp_cell_32 updated
cell content:
[object Object] value: 15

cell name:#temp_cell_32 updated
cell content:
[object Object] value: 15

applyPipeTest
5
(pass) Advance Reactive Tests > Composable, chainable operators tests > pipe_r with apply_e operator should apply function to cell value [0.98ms]
(pass) Advance Reactive Tests > Composable, chainable operators tests > compose_r should chain multiple operators [0.20ms]
(pass) Advance Reactive Tests > Composable, chainable operators tests > pipe_r should chain multiple operators [0.31ms]
512 |       await execute_all_tasks_sequential((error: Error) => {});
513 |       expect(cell_strongest_base_value(filtered)).toBe(the_nothing);
514 | 
515 |       update(input, 15);
516 |       await execute_all_tasks_sequential((error: Error) => {});
517 |       expect(cell_strongest_base_value(filtered)).toBe(15);
                                                        ^
error: expect(received).toBe(expected)

Expected: 15
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:517:51)
(fail) Advance Reactive Tests > Composable, chainable operators tests > pipe_r with filter_e should filter cell value [0.55ms]
526 |       await execute_all_tasks_sequential((error: Error) => {});
527 |       expect(cell_strongest_base_value(reduced)).toBe(5);
528 | 
529 |       update(input, 3);
530 |       await execute_all_tasks_sequential((error: Error) => {});
531 |       expect(cell_strongest_base_value(reduced)).toBe(8);
                                                       ^
error: expect(received).toBe(expected)

Expected: 8
Received: 5

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:531:50)
(fail) Advance Reactive Tests > Composable, chainable operators tests > pipe_r with reduce_e should accumulate values [0.61ms]
551 | 
552 |       // Test Celsius to Fahrenheit conversion
553 |       update(celsius, 0);
554 |       await execute_all_tasks_sequential((error: Error) => {});
555 |       expect(cell_strongest_base_value(celsius)).toBe(0);
556 |       expect(cell_strongest_base_value(fahrenheit)).toBe(32);
                                                          ^
error: expect(received).toBe(expected)

Expected: 32
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:556:53)
(fail) Advance Reactive Tests > Bi-directional reactive propagator tests > should maintain temperature conversion relationship bi-directionally [0.48ms]
581 | 
582 |       // Test meters to feet to inches
583 |       update(meters, 1);
584 |       await execute_all_tasks_sequential((error: Error) => {});
585 |       expect(cell_strongest_base_value(meters)).toBeCloseTo(1);
586 |       expect(cell_strongest_base_value(feet)).toBeCloseTo(3.28084);
                                                    ^
TypeError: Expected received to be a number for 'expect'.
 code: "ERR_INVALID_ARG_TYPE"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:586:47)
(fail) Advance Reactive Tests > Bi-directional reactive propagator tests > should handle multiple linked cells in a bi-directional chain [0.43ms]
(pass) Zip and First operator tests > p_index operator should return the first value and ignore subsequent updates [0.40ms]
(pass) Zip and First operator tests > r_constant should always broadcast new values [1.03ms]
662 |     update(cell2, "y2");
663 |     await execute_all_tasks_sequential((error: Error) => {});
664 |     const sameResult = cell_strongest_base_value(output);
665 |     const r = get_traced_timestamp_layer(cell_strongest(output) as LayeredObject<number>)
666 | 
667 |     expect(sameResult).toEqual(["x2", "y2"]);
                             ^
error: expect(received).toEqual(expected)

  [
+   "x",
+   "y"
-   "x2",
-   "y2"
  ]

- Expected  - 2
+ Received  + 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:667:24)
(fail) Zip and First operator tests > r_zip operator should output an array of values when cell values change [2004.38ms]
(pass) Zip and First operator tests > r_zip operator should combine values produced by other operators [1.01ms]
(pass) Arithmetic Operators Tests > r_add should correctly add the values of input cells [0.30ms]
(pass) Arithmetic Operators Tests > r_subtract should correctly subtract the second cell from the first [0.23ms]
(pass) Arithmetic Operators Tests > r_multiply should correctly multiply the values of two input cells [0.27ms]
(pass) Arithmetic Operators Tests > r_divide should correctly divide the first cell by the second [0.22ms]
767 |     await new Promise((resolve) => setTimeout(resolve, 100));
768 |     update(condition, false);
769 | 
770 |     await execute_all_tasks_sequential((error: Error) => {});
771 | 
772 |     expect(cell_strongest_base_value(output)).toBe(24);
                                                    ^
error: expect(received).toBe(expected)

Expected: 24
Received: 42

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:772:47)
(fail) Reactive Conditional (com_if) Tests > com_if should correctly route values based on the condition in reactive context [117.47ms]
Received fahrenheit value: &&the_nothing&&
864 |       expect(fahrenheitValue).toBeCloseTo(77, 0);
865 |     } else {
866 |       // Handle the case when we get a non-numeric value
867 |       console.log("Received fahrenheit value:", fahrenheitValue);
868 |       // This should not happen if the conversion worked correctly
869 |       expect(typeof fahrenheitValue).toBe('number');
                                           ^
error: expect(received).toBe(expected)

Expected: "number"
Received: "string"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:869:38)
(fail) Complex Propagator Integration Tests > Simple bi-directional temperature conversion with propagator [102.41ms]
Received diameter value: &&the_nothing&&
983 | 
984 |     if (typeof diameterValue === 'number') {
985 |       expect(diameterValue).toBeCloseTo(10, 5);
986 |     } else {
987 |       console.log("Received diameter value:", diameterValue);
988 |       expect(typeof diameterValue).toBe('number');
                                         ^
error: expect(received).toBe(expected)

Expected: "number"
Received: "string"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:988:36)
(fail) Complex Propagator Integration Tests > Circle geometry with linked properties [103.81ms]
1090 | 
1091 |     // Test when condition changes to false
1092 |     await new Promise((resolve) => setTimeout(resolve, 100));
1093 |     update(condition, false);
1094 |     await execute_all_tasks_sequential((error: Error) => {});
1095 |     expect(cell_strongest_base_value(output)).toBe(200);
                                                     ^
error: expect(received).toBe(expected)

Expected: 200
Received: 100

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:1095:47)
(fail) Reactive c_if Conditional Tests > c_if_a should correctly route values based on a boolean condition [103.89ms]
1159 | 
1160 |     // Change condition and verify output updates
1161 |     await new Promise((resolve) => setTimeout(resolve, 100));
1162 |     update(condition, false);
1163 |     await execute_all_tasks_sequential((error: Error) => {});
1164 |     expect(cell_strongest_base_value(output)).toBe("Condition is false");
                                                     ^
error: expect(received).toBe(expected)

Expected: "Condition is false"
Received: "Condition is true"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:1164:47)
(fail) Reactive c_if Conditional Tests > c_if_a should handle different data types and update reactively [102.93ms]
(pass) p_range test > p_range should correctly handle values within the range [7.50ms]
(pass) p_range test > p_range should correctly handle values outside the range [7.32ms]
(pass) p_range test > p_range should correctly handle values at the boundaries [5.61ms]
(pass) p_range test > p_range should correctly handle values at the boundaries [6.79ms]
1267 |     update(input, 30)
1268 | 
1269 | 
1270 | 
1271 |     await execute_all_tasks_sequential((error: Error) => {});
1272 |     expect(cell_strongest_base_value(input)).toBe(20);
                                                    ^
error: expect(received).toBe(expected)

Expected: 20
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:1272:46)
(fail) handle cyclic dependencies > c_range [2.32ms]
1290 | 
1291 |     update(a, 10)
1292 |     update(b, 20)
1293 |     await execute_all_tasks_sequential((error: Error) => {});
1294 |     await new Promise((resolve) => setTimeout(resolve, 10));
1295 |     expect(cell_strongest_base_value(output)).toBe(30);
                                                     ^
error: expect(received).toBe(expected)

Expected: 30
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:1295:47)
(fail) handle contradiction > trace_earliest_emerged_value [11.81ms]
1307 |     update(a, 10)
1308 |     update(b, 20)
1309 |     await execute_all_tasks_sequential((error: Error) => {console.log("error", error)});
1310 | 
1311 |     await new Promise((resolve) => setTimeout(resolve, 100));
1312 |     expect(cell_strongest_base_value(output)).toBe(-10);
                                                     ^
error: expect(received).toBe(expected)

Expected: -10
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:1312:47)
(fail) handle contradiction > trace_latest_emerged_value [101.34ms]
(pass) p_pull timestamp dependency tests > p_pull should preserve timestamp dependencies from source cell [0.44ms]
1378 |     update(pulse2, true)
1379 |     await execute_all_tasks_sequential((error: Error) => {});
1380 | 
1381 |     // Both outputs should have their respective values
1382 |     expect(cell_strongest_base_value(output1)).toBe(100)
1383 |     expect(cell_strongest_base_value(output2)).toBe(200)
                                                      ^
error: expect(received).toBe(expected)

Expected: 200
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/advanceReactive.test.ts:1383:48)
(fail) p_pull timestamp dependency tests > p_pull should handle multiple pulls with different timestamps [1.34ms]
(pass) p_pull timestamp dependency tests > p_pull should return no_compute when source is the_nothing [0.34ms]
(pass) p_pull timestamp dependency tests > p_pull should work with ce_pull wrapper [0.19ms]
First timestamp: BetterSet {
  meta_data: Map(1) {
    "83aee22d-6f12-4e3b-88af-979cdeef5134": {
      timestamp: 291,
      fresh: false,
      id: "83aee22d-6f12-4e3b-88af-979cdeef5134",
    },
  },
  [Symbol(Symbol.iterator)]: [Function],
  _add_item: [Function: _add_item],
  _remove_item: [Function: _remove_item],
  _copy: [Function: _copy],
  _has: [Function: _has],
  _length: [Function: _length],
}
Second timestamp: BetterSet {
  meta_data: Map(1) {
    "83aee22d-6f12-4e3b-88af-979cdeef5134": {
      timestamp: 293,
      fresh: true,
      id: "83aee22d-6f12-4e3b-88af-979cdeef5134",
    },
  },
  [Symbol(Symbol.iterator)]: [Function],
  _add_item: [Function: _add_item],
  _remove_item: [Function: _remove_item],
  _copy: [Function: _copy],
  _has: [Function: _has],
  _length: [Function: _length],
}
(pass) p_pull timestamp dependency tests > p_pull should update when same value has newer timestamp [0.80ms]
Update count: 3 -> 4
(pass) p_pull timestamp dependency tests > p_pull should trigger updates even with identical base values [0.42ms]

test/object_propagator_simple.test.ts:
40 |     )(cmd);
41 | 
42 |     // Test basic functionality
43 |     update(cmd, 5);
44 |     await execute_all_tasks_sequential(() => {});
45 |     expect(cell_strongest_base_value(state)).toBe(5);
                                                  ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator_simple.test.ts:45:46)
(fail) construct_simple_object_propagator - Simple Tests > should create a basic counter propagator [1.66ms]
72 |     )(cmd, result);
73 | 
74 |     // Test that both state and result are updated
75 |     update(cmd, 10);
76 |     await execute_all_tasks_sequential(() => {});
77 |     expect(cell_strongest_base_value(state)).toBe(10);
                                                  ^
error: expect(received).toBe(expected)

Expected: 10
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator_simple.test.ts:77:46)
(fail) construct_simple_object_propagator - Simple Tests > should handle result cell when provided [2.06ms]
105 |     )(cmd);
106 | 
107 |     // Should still update state correctly
108 |     update(cmd, 7);
109 |     await execute_all_tasks_sequential(() => {});
110 |     expect(cell_strongest_base_value(state)).toBe(7);
                                                   ^
error: expect(received).toBe(expected)

Expected: 7
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator_simple.test.ts:110:46)
(fail) construct_simple_object_propagator - Simple Tests > should work without result cell [1.84ms]
140 |     )(cmd);
141 | 
142 |     // Test string commands
143 |     update(cmd, "increment");
144 |     await execute_all_tasks_sequential(() => {});
145 |     expect(cell_strongest_base_value(state)).toBe(1);
                                                   ^
error: expect(received).toBe(expected)

Expected: 1
Received: "&&the_contradiction&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/object_propagator_simple.test.ts:145:46)
(fail) construct_simple_object_propagator - Simple Tests > should handle string commands [1.69ms]

test/comprehensive_object.test.ts:

test/patchSystem_layered.test.ts:

test/virtual_prim.test.ts:
(pass) virtual_prim basics > virtual_copy_set_merge merges frame-by-frame with custom merge [0.30ms]
(pass) virtual_prim basics > v_c_io_unpacking anchors output to occurring parent when present [0.14ms]
(pass) virtual_prim basics > io_function_to_propagator_constructor wires a simple sum [0.41ms]
(pass) virtual_prim basics > doit short-circuits the_nothing and otherwise behaves like plain f [0.38ms]

test/premises.test.ts:

# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------


# Unhandled error between tests
-------------------------------
10 |         else_branch()
11 |     }
12 | }
13 | 
14 | export function throw_error(components_area: string, error_name: string, details: string): () => never {
15 |    return () => {throw new Error( error_name  + ": " + details + " in " + components_area)}
                            ^
error: type mismatch: expected array, but got &&the_contradiction&& in filter
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:15:24)
      at guard (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/other_generic_helper.ts:10:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_collection.ts:22:9)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:144:24)
      at test_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:88:9)
      at addContent (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:118:9)
      at add_cell_content (/Users/linpandi/Dropbox/Programs/Propogator/Cell/Cell.ts:183:8)
      at update (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/interface.ts:24:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/AdvanceReactivity/traced_timestamp/genericPatch.ts:161:17)
-------------------------------

BetterSet {
  meta_data: Map(2) {
    "3867e714": BetterSet {
      meta_data: Map(2) {
        "a": "a",
        "b": "b",
      },
      [Symbol(Symbol.iterator)]: [Function],
      _add_item: [Function: _add_item],
      _remove_item: [Function: _remove_item],
      _copy: [Function: _copy],
      _has: [Function: _has],
      _length: [Function: _length],
    },
    "d25c6918": BetterSet {
      meta_data: Map(2) {
        "c": "c",
        "d": "d",
      },
      [Symbol(Symbol.iterator)]: [Function],
      _add_item: [Function: _add_item],
      _remove_item: [Function: _remove_item],
      _copy: [Function: _copy],
      _has: [Function: _has],
      _length: [Function: _length],
    },
  },
  [Symbol(Symbol.iterator)]: [Function],
  _add_item: [Function: _add_item],
  _remove_item: [Function: _remove_item],
  _copy: [Function: _copy],
  _has: [Function: _has],
  _length: [Function: _length],
}
BetterSet {
  meta_data: Map(4) {
    "8fd12225": BetterSet {
      meta_data: Map(4) {
        "a": "a",
        "b": "b",
        "x": "x",
        "y": "y",
      },
      [Symbol(Symbol.iterator)]: [Function],
      _add_item: [Function: _add_item],
      _remove_item: [Function: _remove_item],
      _copy: [Function: _copy],
      _has: [Function: _has],
      _length: [Function: _length],
    },
    "660b50fe": BetterSet {
      meta_data: Map(3) {
        "a": "a",
        "b": "b",
        "z": "z",
      },
      [Symbol(Symbol.iterator)]: [Function],
      _add_item: [Function: _add_item],
      _remove_item: [Function: _remove_item],
      _copy: [Function: _copy],
      _has: [Function: _has],
      _length: [Function: _length],
    },
    "e1196829": BetterSet {
      meta_data: Map(4) {
        "c": "c",
        "d": "d",
        "x": "x",
        "y": "y",
      },
      [Symbol(Symbol.iterator)]: [Function],
      _add_item: [Function: _add_item],
      _remove_item: [Function: _remove_item],
      _copy: [Function: _copy],
      _has: [Function: _has],
      _length: [Function: _length],
    },
    "ab93502": BetterSet {
      meta_data: Map(3) {
        "c": "c",
        "d": "d",
        "z": "z",
      },
      [Symbol(Symbol.iterator)]: [Function],
      _add_item: [Function: _add_item],
      _remove_item: [Function: _remove_item],
      _copy: [Function: _copy],
      _has: [Function: _has],
      _length: [Function: _length],
    },
  },
  [Symbol(Symbol.iterator)]: [Function],
  _add_item: [Function: _add_item],
  _remove_item: [Function: _remove_item],
  _copy: [Function: _copy],
  _has: [Function: _has],
  _length: [Function: _length],
}
(pass) Premises and Hypotheticals > Search utility functions > pairwise_union tests > should create a cross product of two sets of nogoods [0.85ms]
(pass) Premises and Hypotheticals > Search utility functions > pairwise_union tests > should handle empty sets appropriately [0.08ms]
(pass) Premises and Hypotheticals > Search utility functions > cross_product_union tests > should create a cross product of multiple sets of nogoods [0.77ms]
(pass) Premises and Hypotheticals > Search utility functions > cross_product_union tests > should handle empty sets within the input [0.11ms]
(pass) Premises and Hypotheticals > Search utility functions > cross_product_union tests > should return the initial set when given only one set [0.08ms]
(pass) Premises and Hypotheticals > should trigger cell update when premise state changes [0.52ms]
name: test_cell
strongest: 6
support layer: [object Object]
base layer: 6
content: [object Object]
86 |         make_hypotheticals(test_cell, construct_better_set([1, 2, 3, 4, 5, 6]));
87 |         execute_all_tasks_sequential((error: Error) => {
88 |             console.error("Error during task execution:", error);
89 |         });
90 |         console.log(test_cell.summarize())
91 |         expect(length(cell_content(test_cell) as BetterSet<number>)).toBe(6)
                                                                          ^
error: expect(received).toBe(expected)

Expected: 6
Received: 7

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/premises.test.ts:91:70)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/premises.test.ts:81:57)
(fail) Premises and Hypotheticals > hypotheticals should be automatically handled [2.45ms]
(pass) Premises and Hypotheticals > should calculate hypotheticals like normal values [0.48ms]
(pass) Premises and Hypotheticals > should handle contradictions with hypotheticals [0.60ms]
(pass) Premises and Hypotheticals > mark_only_chosen_premise should work [1.35ms]

test/patchSystem_reactive.test.ts:

test/propagator.test.ts:
65 | 
66 | 
67 |         tell(product, 40, "snd");
68 | 
69 |         await execute_all_tasks_sequential((error: Error) => {});
70 |         expect(cell_strongest_base_value(y)).toBe(5);
                                                  ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:70:46)
(fail) test propagator > c_multiply is propoerly working with value set [0.81ms]
90 | 
91 |         await execute_all_tasks_sequential((error: Error) => {
92 |         });
93 | 
94 | 
95 |         expect(cell_strongest_base_value(y)).toBe(5);
                                                  ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:95:46)
(fail) test propagator > causing contradiction [0.58ms]
122 | 
123 |         execute_all_tasks_sequential((error: Error) => {
124 |         });
125 | 
126 | 
127 |         expect(cell_strongest_base_value(y)).toBe(5);
                                                   ^
error: expect(received).toBe(expected)

Expected: 5
Received: "&&the_nothing&&"

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:127:46)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:108:44)
(fail) test propagator > kick out resolve contradiction [0.55ms]
181 |             i++;
182 |         }
183 | 
184 |         await execute_all_tasks_sequential((error: Error) => {});
185 |         // expect(is_contradiction(cell_strongest_base_value(x))).toBe(true);
186 |         expect(length(x.getContent())).toBe(numValues) // +1 for the contradiction value
                                             ^
error: expect(received).toBe(expected)

Expected: 100
Received: 101

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:186:40)
(fail) test propagator > tell a single cell multiple times should keep all values but the strongest value should be contradiction [46.89ms]
(pass) test propagator > primitive propagator is working with multiply [0.83ms]
(pass) test propagator > primitive propagator is working with subtract [0.60ms]
(pass) test propagator > primitive propagator works fine with incrementation_set [0.58ms]
(pass) test propagator > primitive propagator is working with divide [0.34ms]
(pass) test propagator > primitive propagator is working with add [0.15ms]
(pass) test propagator > contradiction is properly propagated with primitive propagator [0.97ms]
(pass) test propagator > contradiction would be activated in primitive propagator [0.63ms]
cell name:c updated
cell content:
&&the_nothing&&
cell name:c updated
cell strongest value:
&&the_nothing&&
cell name:switch_107 updated
cell content:
&&the_nothing&&
cell name:switch_107 updated
cell strongest value:
&&the_nothing&&
cell name:c updated
cell strongest value:
true
support layer: [object Object]
base layer: true
cell name:c updated
cell content:
[object Object]
cell name:switch_107 updated
cell strongest value:
3
support layer: [object Object]
base layer: 3
cell name:switch_107 updated
cell content:
[object Object]
cell name:switch_107 updated
cell strongest value:
&&the_nothing&&
base layer: &&the_nothing&&
cell name:switch_107 updated
cell content:
[object Object]
cell name:c updated
cell strongest value:
false
support layer: [object Object]
base layer: false
cell name:c updated
cell content:
[object Object]
(pass) test propagator > switch [4.64ms]
name: x1
strongest: 1
support layer: [object Object]
base layer: 1
content: [object Object]
(pass) test propagator > equality [0.94ms]
(pass) test propagator > less than [0.76ms]
(pass) test propagator > propagator disposal should stop cell updates [0.87ms]
(pass) test propagator > contradiction with multiple propagators and resolution [1.17ms]
(pass) test propagator > resolving contradiction with multiple conflicting inputs [1.13ms]
(pass) test propagator > contradiction in a circular dependency [1.59ms]
(pass) test propagator > resolving contradiction with floating-point precision issues [1.16ms]
31 |     summary_rules_with_args(...args: any[]) :string[]{
32 |         return this.rules.map(rule => rule.summary_with_args(...args))
33 |     }
34 | 
35 |     get_handler(...args: any) : ((...args: any) => any) | null {
36 |        const rule = this.rules.find(rule => rule.applicability.execute(...args))
               ^
RangeError: Maximum call stack size exceeded.
      at every (1:11)
      at find (1:11)
      at get_handler (/Users/linpandi/Dropbox/Programs/GenericProcedure/DispatchStore.ts:36:32)
      at generic_procedure_dispatch (/Users/linpandi/Dropbox/Programs/GenericProcedure/GenericProcedure.ts:23:52)
      at _remove_item (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_better_set.ts:47:26)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/Propagator/Search.ts:251:63)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_better_set.ts:164:9)
      at save_nogood (/Users/linpandi/Dropbox/Programs/Propogator/Propagator/Search.ts:247:5)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/GenericProcedure/built_in_generics/generic_better_set.ts:164:9)
      at process_contradictions (/Users/linpandi/Dropbox/Programs/Propogator/Propagator/Search.ts:228:4)
(fail) test propagator > pAMB simple binary [2492.64ms]
(pass) test propagator > Binary AMB operator [8.02ms]
[]

690 |     // Add assertions for expected results
691 |     expect(is_equal(results,
692 |         [[ 1, 3, 4 ], [ 1, 1, 2 ],
693 |         [ 3, 1, 4 ], [ 2, 1, 3 ],
694 |             [ 2, 3, 5 ], [ 1, 2, 3],
695 |             [ 3, 2, 5 ], [ 2, 2, 4 ]])).toBe(true)
                                              ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:695:41)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/propagator.test.ts:653:38)
(fail) test propagator > AMB_A operator: simple adder [1.38ms]
&&the_nothing&& &&the_nothing&& &&the_nothing&&
[]

(pass) test propagator > AMB_A operator: simple multiply [0.63ms]
cell name:output updated
cell content:
[object Object]
cell name:output updated
cell content:
[object Object]
cell name:output updated
cell content:
[object Object]
cell name:output updated
cell content:
[object Object]
cell name:output updated
cell content:
[object Object]
(pass) test propagator > compound propagator com_if works correctly [4.44ms]
(pass) test propagator > propagator disposal [0.60ms]

test/socket.test.ts:

test/operator-memory-util.test.ts:
75 |       };
76 | 
77 |       return propagator;
78 |     };
79 | 
80 |     const tester = new OperatorMemoryTest("compare");
                            ^
ReferenceError: Can't find variable: OperatorMemoryTest
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/operator-memory-util.test.ts:80:24)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/operator-memory-util.test.ts:52:73)
(fail) comparing original and fixed p_remove_duplicates with utility [2.04ms]
114 |     // We use a proportional comparison to make the test more stable
115 |     expect(fixedRetainRatio).toBeLessThanOrEqual(originalRetainRatio * 1.1); // Allow 10% margin
116 |   });
117 | 
118 |   test("continuous monitoring of a complex operation", async () => {
119 |     const tester = new OperatorMemoryTest("continuous");
                             ^
ReferenceError: Can't find variable: OperatorMemoryTest
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/operator-memory-util.test.ts:119:24)
      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/operator-memory-util.test.ts:118:56)
(fail) continuous monitoring of a complex operation [0.41ms]

test/test_abstraction_level_final.test.ts:
36 | 
37 | describe("Final Abstraction Level and Traversal Tests", () => {
38 | 
39 |     test("abstraction levels work correctly - ROOT LEVEL IS 1", () => {
40 |         const rootRelation = get_global_parent();
41 |         expect(rootRelation.get_level()).toBe(0);
                                              ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:41:42)
(fail) Final Abstraction Level and Traversal Tests > abstraction levels work correctly - ROOT LEVEL IS 1 [0.33ms]
75 |                 output.addContent(input.getStrongest());
76 |             },
77 |             "root_propagator"
78 |         );
79 | 
80 |         expect(propagator_level(rootPropagator)).toBe(1);
                                                      ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:80:50)
(fail) Final Abstraction Level and Traversal Tests > propagators maintain correct abstraction levels [0.37ms]
114 | 
115 |         // Create primitive propagator at root level - ACTUALLY GET LEVEL 1
116 |         const rootPrimitive = function_to_primitive_propagator("root_primitive", (x: number) => x + 1);
117 |         const actualRootPropagator = rootPrimitive(input, output);
118 | 
119 |         expect(propagator_level(actualRootPropagator)).toBe(1);
                                                             ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:119:56)
(fail) Final Abstraction Level and Traversal Tests > function_to_primitive_propagator maintains correct abstraction level [0.29ms]
166 |         expect(result.cells.size).toBe(2); // level1Input and level1Output
167 |         expect(result.propagators.size).toBe(1); // actualLevel1Prop
168 | 
169 |         // Verify the found items are actually level 1
170 |         for (const [id, cell] of result.cells) {
171 |             expect(cell_level(cell)).toBe(1);
                                           ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:171:38)
(fail) Final Abstraction Level and Traversal Tests > traverse_with_level(1) finds only level 1 cells and propagators [0.39ms]
204 |         expect(result.cells.size).toBe(2); // level2Input and level2Output
205 |         expect(result.propagators.size).toBe(1); // level2Prop
206 | 
207 |         // Verify the found items are actually level 2
208 |         for (const [id, cell] of result.cells) {
209 |             expect(cell_level(cell)).toBe(2);
                                           ^
error: expect(received).toBe(expected)

Expected: 2
Received: 3

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:209:38)
(fail) Final Abstraction Level and Traversal Tests > traverse_with_level(2) finds only level 2 cells and propagators [0.55ms]
248 |         expect(result.cells.size).toBe(3); // a, b, c
249 |         expect(result.propagators.size).toBe(2); // actualP1, actualP2
250 | 
251 |         // Verify all found items are level 1
252 |         for (const [id, cell] of result.cells) {
253 |             expect(cell_level(cell)).toBe(1);
                                           ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:253:38)
(fail) Final Abstraction Level and Traversal Tests > traverse_primitive_level finds only level 1 items (not level 0!) [0.49ms]
(pass) Final Abstraction Level and Traversal Tests > find_cell_by_id and find_propagator_by_id work with actual UUIDs [0.16ms]
(pass) Final Abstraction Level and Traversal Tests > traverse_with_level correctly filters mixed-level networks [0.21ms]
360 |                 expect(propagator_level(actualInnerProp)).toBe(1);
361 |             },
362 |             "outer_compound"
363 |         );
364 | 
365 |         expect(propagator_level(outerCompound)).toBe(1);
                                                      ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_final.test.ts:365:49)
(fail) Final Abstraction Level and Traversal Tests > nested compound propagators maintain correct levels [0.24ms]

test/compound_disposal.test.ts:
(pass) Compound Propagator Child Disposal > Basic Child Disposal > should dispose internal cells when compound propagator is disposed [0.75ms]
(pass) Compound Propagator Child Disposal > Basic Child Disposal > should dispose internal propagators when compound propagator is disposed [0.48ms]
(pass) Compound Propagator Child Disposal > Basic Child Disposal > should dispose propagators before cells [0.57ms]
(pass) Compound Propagator Child Disposal > Nested Compound Propagators > should dispose nested compound propagators and their children [0.45ms]
(pass) Compound Propagator Child Disposal > Nested Compound Propagators > should handle deeply nested compound propagators [0.52ms]
(pass) Compound Propagator Child Disposal > Input/Output Cell Handling > should not dispose input and output cells of compound propagator [0.37ms]
(pass) Compound Propagator Child Disposal > Complex Network Disposal > should dispose compound propagator with branching internal network [0.45ms]
(pass) Compound Propagator Child Disposal > Complex Network Disposal > should handle disposal with shared internal cells [0.41ms]
(pass) Compound Propagator Child Disposal > Edge Cases > should handle empty compound propagator [0.09ms]
(pass) Compound Propagator Child Disposal > Edge Cases > should handle compound propagator with only cells [0.08ms]
(pass) Compound Propagator Child Disposal > Edge Cases > should handle compound propagator with only propagators [0.19ms]
(pass) Compound Propagator Child Disposal > Edge Cases > should handle double disposal gracefully [0.06ms]

test/comprehensive_object_simple.test.ts:
(pass) Basic Comprehensive Object Functions > createVirtualOutputs should create correct number of outputs [0.21ms]
(pass) Basic Comprehensive Object Functions > shallowMergeEnv should merge environments correctly [0.05ms]
(pass) Basic Comprehensive Object Functions > toEnvCell should convert different env types [0.31ms]
Shadow1 value: Map(1) {
  "key1": "value1",
} object
Shadow2 value: Map(1) {
  "key1": "value1",
} object
(pass) Basic Comprehensive Object Functions > createShadowEnvs should create shadow environments [0.85ms]
(pass) Simple CE Helper Test > ce_apply should work with simple function [0.29ms]

test/socketIntegration.test.ts:

test/miniReactor.test.ts:
(pass) miniReactor > should able to successfully send value to observer [0.27ms]
(pass) miniReactor > multiple node should able to successfully send value to observer [0.07ms]
{
  parent_id: 34,
  child_id: 35,
  activate: [Function: activate],
  id: 37,
}
(pass) miniReactor > disconnect should remove edge [0.35ms]
(pass) miniReactor > should handle multiple observers [0.09ms]
(pass) miniReactor > should propagate updates through multiple connections [0.07ms]
61 1
63 0
61 1
63 2
(pass) miniReactor Combinators > combine should combine multiple nodes [0.29ms]
(pass) miniReactor Combinators > stepper should create a stepper node [0.05ms]
{
  parent_id: 75,
  child_id: 76,
  activate: [Function: activate],
  id: 78,
}
{
  parent_id: 74,
  child_id: 75,
  activate: [Function: activate],
  id: 77,
}
{
  parent_id: 76,
  child_id: 79,
  activate: [Function: activate],
  id: 80,
}
(pass) miniReactor Combinators > dispose should recursively dispose nodes [0.52ms]
{
  parent_id: 81,
  child_id: 82,
  activate: [Function: activate],
  id: 84,
}
{
  parent_id: 82,
  child_id: 83,
  activate: [Function: activate],
  id: 85,
}
{
  parent_id: 83,
  child_id: 86,
  activate: [Function: activate],
  id: 87,
}
(pass) miniReactor Combinators > dispose on source node should remove all child edges [0.25ms]

test/patchSystem_verification.test.ts:

test/valueset.test.ts:
(pass) ValueSet > should create a ValueSet with given elements
(pass) ValueSet > should check if a value is a ValueSet
(pass) ValueSet > element subsumes shoud when support and base is the same [0.23ms]
(pass) ValueSet > element subsumes shoud when base is the same and support is higher [0.07ms]
(pass) ValueSet > element subsumes shoud when base is higher [0.02ms]
(pass) ValueSet > element subsumes shoud when support is higher [0.12ms]

test/test_abstraction_level_debug.test.ts:
Root relation level: 1
31 | describe("Abstraction Level Debug Tests", () => {
32 | 
33 |     test("debug: what is the actual root level?", () => {
34 |         const rootRelation = get_global_parent();
35 |         console.log("Root relation level:", rootRelation.get_level());
36 |         expect(rootRelation.get_level()).toBe(0);
                                              ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_debug.test.ts:36:42)
(fail) Abstraction Level Debug Tests > debug: what is the actual root level? [0.23ms]
Root relation level: 1
Root cell level: 2
(pass) Abstraction Level Debug Tests > debug: what level are cells created at root? [0.08ms]
Root relation level: 1
Root propagator level: 2
(pass) Abstraction Level Debug Tests > debug: what level are propagators created at root? [0.10ms]
Primitive function type: function
Primitive function has getRelation: false
Actual propagator type: object
Actual propagator has getRelation: true
Actual propagator level: 2
(pass) Abstraction Level Debug Tests > debug: function_to_primitive_propagator return type [0.10ms]
Root relation level: 1
Parent relation level: 2
Current parent in context: 2
Cell in context level: 3
Propagator in context level: 3
Cell level after context: 3
Propagator level after context: 3
(pass) Abstraction Level Debug Tests > debug: parameterize_parent behavior [0.21ms]
Root relation level: 1
Level 1 relation level: 2
Level 2 relation level: 3
In level 1 context, current parent: 2
In level 2 context, current parent: 3
Cell in nested context level: 4
Cell level after nested context: 4
(pass) Abstraction Level Debug Tests > debug: nested parameterize_parent behavior [0.14ms]

test/patchSystem_cell.test.ts:

test/disposal.test.ts:
(pass) Comprehensive Disposal System > Basic Disposal Operations > should mark cell as disposed when dispose() is called [0.02ms]
(pass) Comprehensive Disposal System > Basic Disposal Operations > should ignore new content after disposal [0.16ms]
(pass) Comprehensive Disposal System > Basic Disposal Operations > should handle disposal of constant cells [0.10ms]
(pass) Comprehensive Disposal System > Basic Disposal Operations > should handle disposal of cells with layered values [0.16ms]
(pass) Comprehensive Disposal System > Disposal Propagation > should propagate disposal through simple propagator chain [0.25ms]
(pass) Comprehensive Disposal System > Disposal Propagation > should propagate disposal through multiple propagators [0.29ms]
(pass) Comprehensive Disposal System > Disposal Propagation > should handle disposal propagation in diamond dependency [0.23ms]
(pass) Comprehensive Disposal System > Circular Disposal Scenarios > should handle circular disposal correctly [0.09ms]
(pass) Comprehensive Disposal System > Circular Disposal Scenarios > should handle self-referential disposal [0.25ms]
(pass) Comprehensive Disposal System > Compound and Constraint Propagators > should handle disposal of compound propagators [0.12ms]
(pass) Comprehensive Disposal System > Compound and Constraint Propagators > should handle disposal of constraint propagators [0.10ms]
(pass) Comprehensive Disposal System > Disposal Queue and Cleanup > should track disposal queue correctly [0.11ms]
(pass) Comprehensive Disposal System > Disposal Queue and Cleanup > should handle multiple disposals in same round [0.09ms]
(pass) Comprehensive Disposal System > Disposal Queue and Cleanup > should clean up disposed items after execution [0.07ms]
(pass) Comprehensive Disposal System > Partial Disposal > should allow partial disposal of propagators [0.14ms]
(pass) Comprehensive Disposal System > Partial Disposal > should handle disposal of intermediate cells [0.26ms]
(pass) Comprehensive Disposal System > Disposal with Contradictions > should handle disposal when contradiction exists [0.20ms]
(pass) Comprehensive Disposal System > Disposal with Contradictions > should handle disposal of contradiction cells [0.13ms]
(pass) Comprehensive Disposal System > Complex Network Scenarios > should handle disposal in complex multi-layer network [0.37ms]
(pass) Comprehensive Disposal System > Complex Network Scenarios > should handle disposal with multiple independent branches [0.42ms]
(pass) Comprehensive Disposal System > Edge Cases and Error Handling > should handle disposal of already disposed cells [0.05ms]
(pass) Comprehensive Disposal System > Edge Cases and Error Handling > should handle disposal of cells with nothing values [0.03ms]
(pass) Comprehensive Disposal System > Edge Cases and Error Handling > should handle disposal during active propagation [0.07ms]
(pass) Comprehensive Disposal System > Edge Cases and Error Handling > should handle disposal queue overflow scenarios [0.86ms]
(pass) Comprehensive Disposal System > Integration with Generic Disposal > should work with generic dispose function [0.13ms]
(pass) Comprehensive Disposal System > Integration with Generic Disposal > should handle subtree disposal correctly [0.36ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal in reactive update system [0.22ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive compound propagators [0.46ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive bi-directional propagators [0.16ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive pipe operations [0.60ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive conditional operators [0.90ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive arithmetic operators [0.29ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive timestamp tracking [11.49ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive contradiction handling [0.40ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive composite operators [11.82ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive range constraints [4.94ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive zip operations [0.59ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive constant cells [0.27ms]
(pass) Comprehensive Disposal System > Reactive System Disposal Tests > should handle disposal with reactive complex network [0.26ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should remove disposed cells from global state after cleanup [0.06ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should remove disposed propagators from global state after cleanup [0.09ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should remove multiple disposed items from global state [0.09ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should handle cleanup with reactive scheduler [0.12ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should handle cleanup of complex networks [0.09ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should handle cleanup with compound propagators [0.28ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should handle cleanup with reactive bi-directional propagators [0.08ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should verify cleanup happens in next execution round [0.16ms]
(pass) Comprehensive Disposal System > Global State Cleanup Tests > should handle cleanup with disposal during active propagation [0.06ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators with simple constraints [0.16ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators with circular dependencies [0.10ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators with multiple constraints [0.12ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators with reactive scheduler [0.14ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators when cells are disposed [0.14ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators with complex constraints [0.08ms]
(pass) Comprehensive Disposal System > Constraint Propagator Disposal Tests > should handle disposal of constraint propagators with generic dispose function [0.19ms]

test/test_abstraction_level_corrected.test.ts:
36 | 
37 | describe("Corrected Abstraction Level and Traversal Tests", () => {
38 | 
39 |     test("cells maintain correct abstraction levels - ACTUAL BEHAVIOR", () => {
40 |         const rootRelation = get_global_parent();
41 |         expect(rootRelation.get_level()).toBe(0);
                                              ^
error: expect(received).toBe(expected)

Expected: 0
Received: 1

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:41:42)
(fail) Corrected Abstraction Level and Traversal Tests > cells maintain correct abstraction levels - ACTUAL BEHAVIOR [0.60ms]
75 |                 output.addContent(input.getStrongest());
76 |             },
77 |             "root_propagator"
78 |         );
79 | 
80 |         expect(propagator_level(rootPropagator)).toBe(1); // Corrected expectation
                                                      ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:80:50)
(fail) Corrected Abstraction Level and Traversal Tests > propagators maintain correct abstraction levels - ACTUAL BEHAVIOR [0.39ms]
114 | 
115 |         // Create primitive propagator at root level - ACTUALLY GET LEVEL 1
116 |         const rootPrimitive = function_to_primitive_propagator("root_primitive", (x: number) => x + 1);
117 |         const actualRootPropagator = rootPrimitive(input, output);
118 | 
119 |         expect(propagator_level(actualRootPropagator)).toBe(1); // Corrected expectation
                                                             ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:119:56)
(fail) Corrected Abstraction Level and Traversal Tests > function_to_primitive_propagator maintains correct abstraction level - ACTUAL BEHAVIOR [0.20ms]
177 |         expect(result.cells.size).toBe(2); // level1Input and level1Output
178 |         expect(result.propagators.size).toBe(1); // actualLevel1Prop
179 | 
180 |         // Verify the found items are actually level 1
181 |         for (const [id, cell] of result.cells) {
182 |             expect(cell_level(cell)).toBe(1);
                                           ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:182:38)
(fail) Corrected Abstraction Level and Traversal Tests > traverse_with_level(1) finds only level 1 cells and propagators - ACTUAL BEHAVIOR [0.42ms]
215 |         expect(result.cells.size).toBe(2); // level2Input and level2Output
216 |         expect(result.propagators.size).toBe(1); // level2Prop
217 | 
218 |         // Verify the found items are actually level 2
219 |         for (const [id, cell] of result.cells) {
220 |             expect(cell_level(cell)).toBe(2);
                                           ^
error: expect(received).toBe(expected)

Expected: 2
Received: 3

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:220:38)
(fail) Corrected Abstraction Level and Traversal Tests > traverse_with_level(2) finds only level 2 cells and propagators - ACTUAL BEHAVIOR [0.53ms]
259 |         expect(result.cells.size).toBe(3); // a, b, c
260 |         expect(result.propagators.size).toBe(2); // actualP1, actualP2
261 | 
262 |         // Verify all found items are level 1
263 |         for (const [id, cell] of result.cells) {
264 |             expect(cell_level(cell)).toBe(1); // Corrected expectation
                                           ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:264:38)
(fail) Corrected Abstraction Level and Traversal Tests > traverse_primitive_level finds only level 1 items - ACTUAL BEHAVIOR [0.60ms]
(pass) Corrected Abstraction Level and Traversal Tests > traverse_with_level correctly filters mixed-level networks - ACTUAL BEHAVIOR [0.23ms]
335 |         // Test find_cell_by_id
336 |         const foundCell1 = find_cell_by_id("test_cell_1");
337 |         const foundCell2 = find_cell_by_id("test_cell_2");
338 |         const notFoundCell = find_cell_by_id("nonexistent_cell");
339 | 
340 |         expect(foundCell1).toBe(cell1);
                                 ^
error: expect(received).toBe(expected)

Expected: {
  getRelation: [Function: getRelation],
  getContent: [Function: getContent],
  getStrongest: [Function: getStrongest],
  getNeighbors: [Function: getNeighbors],
  testContent: [Function: testContent],
  addContent: [Function: addContent],
  addNeighbor: [Function: addNeighbor],
  summarize: [Function: summarize],
  dispose: [Function: dispose],
}
Received: undefined

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:340:28)
(fail) Corrected Abstraction Level and Traversal Tests > find_cell_by_id and find_propagator_by_id work correctly [0.24ms]
371 |                 expect(propagator_level(actualInnerProp)).toBe(1); // Corrected expectation
372 |             },
373 |             "outer_compound"
374 |         );
375 | 
376 |         expect(propagator_level(outerCompound)).toBe(1); // Corrected expectation
                                                      ^
error: expect(received).toBe(expected)

Expected: 1
Received: 2

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/test_abstraction_level_corrected.test.ts:376:49)
(fail) Corrected Abstraction Level and Traversal Tests > nested compound propagators maintain correct levels - ACTUAL BEHAVIOR [0.22ms]

test/generic_propagator.test.ts:
(pass) Generic Propagator Tests > Basic Generic Propagator Prototype > generic_propagator_prototype should create an interface propagator [1.45ms]
(pass) Generic Propagator Tests > Define Generic Propagator Handler > should handle numeric addition when inputs are numbers [2.69ms]
(pass) Generic Propagator Tests > Define Generic Propagator Handler > should handle string concatenation when inputs are strings [2.03ms]
(pass) Generic Propagator Tests > Define Generic Propagator Handler > should not trigger handler when inputs don't match critic [1.71ms]
***trace start *** 
fn: number handler 

args: name: #temp_cell_159
strongest: &&the_nothing&&
content: &&the_nothing&&, 
name: #temp_cell_160
strongest: &&the_nothing&&
content: &&the_nothing&&, 
name: result1
strongest: &&the_nothing&&
content: &&the_nothing&&

result: 
 propagator: + inputs: /nname: #temp_cell_159
strongest: &&the_nothing&&
content: &&the_nothing&&/nname: #temp_cell_160
strongest: &&the_nothing&&
content: &&the_nothing&& outputs: /nname: result1
strongest: &&the_nothing&&
content: &&the_nothing&&
***trace end *** 
319 | 
320 |       // Test string handler
321 |       update(input1, "hello");
322 |       update(input2, "world");
323 |       await execute_all_tasks_sequential(() => {});
324 |       expect(cell_strongest_base_value(output1)).toBe("helloworld");
                                                       ^
error: expect(received).toBe(expected)

Expected: "helloworld"
Received: 30

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/generic_propagator.test.ts:324:50)
(fail) Generic Propagator Tests > Define Generic Propagator Handler > should support multiple handlers with different critics [5.74ms]
354 | 
355 | 
356 |       update(input1, true);
357 |       update(input2, true);
358 |       await execute_all_tasks_sequential((error: Error) => {});
359 |       expect(cell_strongest_base_value(output)).toBe(true);
                                                      ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/generic_propagator.test.ts:359:49)
(fail) Generic Propagator Tests > Match Cells Prototype > match_cells_prototype should create a matching propagator [2.28ms]
375 |       expect(cell_strongest_base_value(output)).toBe(true);
376 | 
377 |       // Test with number
378 |       update(input, 42);
379 |       await execute_all_tasks_sequential((error: Error) => {});
380 |       expect(cell_strongest_base_value(output)).toBe(false);
                                                      ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/generic_propagator.test.ts:380:49)
(fail) Generic Propagator Tests > String Predicates > p_is_string should correctly identify strings [0.56ms]
396 |       expect(cell_strongest_base_value(result)).toBe(true);
397 | 
398 |       // Test with number
399 |       update(input, 42);
400 |       await execute_all_tasks_sequential((error: Error) => {});
401 |       expect(cell_strongest_base_value(result)).toBe(false);
                                                      ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/generic_propagator.test.ts:401:49)
(fail) Generic Propagator Tests > String Predicates > ce_is_string should work as cell expression [0.43ms]
(pass) Generic Propagator Tests > Simple Generic Propagator Constructor > construct_simple_generic_propagator should create a working propagator [2.05ms]
(pass) Generic Propagator Tests > Complex Generic Propagator Scenarios > should handle conditional routing based on input types [0.76ms]
(pass) Generic Propagator Tests > Error Handling and Edge Cases > should handle empty predicate arrays in match_cells [0.14ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should convert propagator constructor to handler network [0.06ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should handle multiple inputs and outputs [0.71ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should work with string operations [0.32ms]
646 |       expect(cell_strongest_base_value(output)).toBe(true);
647 | 
648 |       // Test with one false
649 |       update(input2, false);
650 |       await execute_all_tasks_sequential(() => {});
651 |       expect(cell_strongest_base_value(output)).toBe(false);
                                                      ^
error: expect(received).toBe(expected)

Expected: false
Received: true

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/generic_propagator.test.ts:651:49)
(fail) Generic Propagator Tests > Propagator to Handler Network > should work with boolean operations [0.65ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should work with compound propagators [0.67ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should handle empty inputs and outputs [0.11ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should work with single input and output [0.11ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should work with mixed type operations [0.41ms]
812 |       expect(cell_strongest_base_value(output)).toBe(6);
813 | 
814 |       // Update one input and verify reactive behavior
815 |       update(input1, 10);
816 |       await execute_all_tasks_sequential(() => {});
817 |       expect(cell_strongest_base_value(output)).toBe(15);
                                                      ^
error: expect(received).toBe(expected)

Expected: 15
Received: 6

      at <anonymous> (/Users/linpandi/Dropbox/Programs/Propogator/test/generic_propagator.test.ts:817:49)
(fail) Generic Propagator Tests > Propagator to Handler Network > should work with reactive updates [0.93ms]
(pass) Generic Propagator Tests > Propagator to Handler Network > should work with conditional operations [0.39ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_critics should accept valid critics function [0.06ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_critics should throw error for invalid critics [0.06ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_handler_network should accept valid handler network [0.05ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_handler_network should throw error for invalid handler network [0.05ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_dispatchers_and_results should accept valid arrays [0.06ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_dispatchers_and_results should throw error for invalid dispatchers [0.03ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_dispatchers_and_results should throw error for invalid results [0.02ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_dispatchers_and_results should throw error for mismatched lengths [0.03ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_predicates should accept valid predicates array [0.07ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_predicates should throw error for empty array [0.06ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_predicates should throw error for non-function predicates [0.04ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_inputs_match_predicates should accept matching lengths [0.05ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Validation Functions > validate_inputs_match_predicates should throw error for mismatched lengths [0.03ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > is_last_index should correctly identify last index [0.02ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > create_interface_propagator should create working propagator [0.63ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > store_interface_metadata should store metadata correctly [0.11ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > create_succeeded_cells should create cells with switch logic [0.73ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > create_match_cells_propagator should create working propagator [2.33ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > match_predicates_recursive should handle single predicate [0.85ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > match_predicates_recursive should handle multiple predicates [1.11ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Utility Functions > match_predicates_recursive should handle false predicates [1.07ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Metadata Functions > get_propagator_metadata should throw error for invalid input [0.11ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Metadata Functions > get_propagator_metadata should throw error for unknown interface [0.07ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Metadata Functions > get_propagator_metadata should work with valid interface [0.07ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Refactored Main Functions > refactored generic_propagator_prototype should work correctly [0.68ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Refactored Main Functions > refactored generic_propagator_prototype should work without validation [0.07ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Refactored Main Functions > refactored match_cells should work correctly [0.83ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Refactored Main Functions > refactored match_cells should validate predicates [0.25ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Refactored Main Functions > refactored define_generic_propagator_handler_network should work correctly [0.91ms]
(pass) Generic Propagator Tests > Refactored Sub-Functions Tests > Refactored Main Functions > refactored define_generic_propagator_handler_network should validate inputs [0.06ms]

75 tests failed:
(fail) Abstraction Level and Traversal Tests > cells maintain correct abstraction levels in different contexts [0.67ms]
(fail) Abstraction Level and Traversal Tests > propagators maintain correct abstraction levels [0.58ms]
(fail) Abstraction Level and Traversal Tests > function_to_primitive_propagator maintains correct abstraction level [0.35ms]
(fail) Abstraction Level and Traversal Tests > compound_propagator maintains correct abstraction level [0.31ms]
(fail) Abstraction Level and Traversal Tests > traverse_with_level(0) finds only level 0 cells and propagators [0.79ms]
(fail) Abstraction Level and Traversal Tests > traverse_with_level(1) finds only level 1 cells and propagators [0.46ms]
(fail) Abstraction Level and Traversal Tests > traverse_primitive_level finds only level 0 items [0.58ms]
(fail) Abstraction Level and Traversal Tests > find_cell_by_id and find_propagator_by_id work correctly [0.33ms]
(fail) Abstraction Level and Traversal Tests > nested compound propagators maintain correct levels [0.23ms]
(fail) construct_simple_object_propagator > Basic State Management > should update state based on command [4.24ms]
(fail) construct_simple_object_propagator > Basic State Management > should handle complex state transitions [4.49ms]
(fail) construct_simple_object_propagator > Result Handling > should sync result when result cell is provided [5.26ms]
(fail) construct_simple_object_propagator > Result Handling > should handle undefined results gracefully [4.18ms]
(fail) construct_simple_object_propagator > Edge Cases and Error Handling > should work without result cell [2.52ms]
(fail) construct_simple_object_propagator > Edge Cases and Error Handling > should handle complex object states [2.89ms]
(fail) construct_simple_object_propagator > Reactive Behavior > should react to state changes [1.02ms]
(fail) construct_simple_object_propagator > Reactive Behavior > should maintain consistency with multiple propagators [1.99ms]
(fail) Debug Lookup Tests > debug: cell IDs and lookup [0.67ms]
(fail) Advance Reactive Tests > timestamp value merge tests > integrated test with cell [203.24ms]
(fail) Advance Reactive Tests > Non-chainable operators tests > switch operator should output 'then' cell's value when condition is true [0.98ms]
(fail) Advance Reactive Tests > Non-chainable operators tests > p_sync should update output when input changes [2.03ms]
(fail) Advance Reactive Tests > Non-chainable operators tests > or operator should select the fresher cell value [1.74ms]
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > p_drop should ignore first N values and pass subsequent ones [0.85ms]
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > p_drop with 0 should pass all values through [0.83ms]
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > p_take should emit first N values then stop (no_compute) [0.64ms]
(fail) Advance Reactive Tests > p_drop / p_take / p_first tests > edge cases: negative and oversized counts [0.56ms]
(fail) Advance Reactive Tests > Composable, chainable operators tests > pipe_r with filter_e should filter cell value [0.55ms]
(fail) Advance Reactive Tests > Composable, chainable operators tests > pipe_r with reduce_e should accumulate values [0.61ms]
(fail) Advance Reactive Tests > Bi-directional reactive propagator tests > should maintain temperature conversion relationship bi-directionally [0.48ms]
(fail) Advance Reactive Tests > Bi-directional reactive propagator tests > should handle multiple linked cells in a bi-directional chain [0.43ms]
(fail) Zip and First operator tests > r_zip operator should output an array of values when cell values change [2004.38ms]
(fail) Reactive Conditional (com_if) Tests > com_if should correctly route values based on the condition in reactive context [117.47ms]
(fail) Complex Propagator Integration Tests > Simple bi-directional temperature conversion with propagator [102.41ms]
(fail) Complex Propagator Integration Tests > Circle geometry with linked properties [103.81ms]
(fail) Reactive c_if Conditional Tests > c_if_a should correctly route values based on a boolean condition [103.89ms]
(fail) Reactive c_if Conditional Tests > c_if_a should handle different data types and update reactively [102.93ms]
(fail) handle cyclic dependencies > c_range [2.32ms]
(fail) handle contradiction > trace_earliest_emerged_value [11.81ms]
(fail) handle contradiction > trace_latest_emerged_value [101.34ms]
(fail) p_pull timestamp dependency tests > p_pull should handle multiple pulls with different timestamps [1.34ms]
(fail) construct_simple_object_propagator - Simple Tests > should create a basic counter propagator [1.66ms]
(fail) construct_simple_object_propagator - Simple Tests > should handle result cell when provided [2.06ms]
(fail) construct_simple_object_propagator - Simple Tests > should work without result cell [1.84ms]
(fail) construct_simple_object_propagator - Simple Tests > should handle string commands [1.69ms]
(fail) Premises and Hypotheticals > hypotheticals should be automatically handled [2.45ms]
(fail) test propagator > c_multiply is propoerly working with value set [0.81ms]
(fail) test propagator > causing contradiction [0.58ms]
(fail) test propagator > kick out resolve contradiction [0.55ms]
(fail) test propagator > tell a single cell multiple times should keep all values but the strongest value should be contradiction [46.89ms]
(fail) test propagator > pAMB simple binary [2492.64ms]
(fail) test propagator > AMB_A operator: simple adder [1.38ms]
(fail) comparing original and fixed p_remove_duplicates with utility [2.04ms]
(fail) continuous monitoring of a complex operation [0.41ms]
(fail) Final Abstraction Level and Traversal Tests > abstraction levels work correctly - ROOT LEVEL IS 1 [0.33ms]
(fail) Final Abstraction Level and Traversal Tests > propagators maintain correct abstraction levels [0.37ms]
(fail) Final Abstraction Level and Traversal Tests > function_to_primitive_propagator maintains correct abstraction level [0.29ms]
(fail) Final Abstraction Level and Traversal Tests > traverse_with_level(1) finds only level 1 cells and propagators [0.39ms]
(fail) Final Abstraction Level and Traversal Tests > traverse_with_level(2) finds only level 2 cells and propagators [0.55ms]
(fail) Final Abstraction Level and Traversal Tests > traverse_primitive_level finds only level 1 items (not level 0!) [0.49ms]
(fail) Final Abstraction Level and Traversal Tests > nested compound propagators maintain correct levels [0.24ms]
(fail) Abstraction Level Debug Tests > debug: what is the actual root level? [0.23ms]
(fail) Corrected Abstraction Level and Traversal Tests > cells maintain correct abstraction levels - ACTUAL BEHAVIOR [0.60ms]
(fail) Corrected Abstraction Level and Traversal Tests > propagators maintain correct abstraction levels - ACTUAL BEHAVIOR [0.39ms]
(fail) Corrected Abstraction Level and Traversal Tests > function_to_primitive_propagator maintains correct abstraction level - ACTUAL BEHAVIOR [0.20ms]
(fail) Corrected Abstraction Level and Traversal Tests > traverse_with_level(1) finds only level 1 cells and propagators - ACTUAL BEHAVIOR [0.42ms]
(fail) Corrected Abstraction Level and Traversal Tests > traverse_with_level(2) finds only level 2 cells and propagators - ACTUAL BEHAVIOR [0.53ms]
(fail) Corrected Abstraction Level and Traversal Tests > traverse_primitive_level finds only level 1 items - ACTUAL BEHAVIOR [0.60ms]
(fail) Corrected Abstraction Level and Traversal Tests > find_cell_by_id and find_propagator_by_id work correctly [0.24ms]
(fail) Corrected Abstraction Level and Traversal Tests > nested compound propagators maintain correct levels - ACTUAL BEHAVIOR [0.22ms]
(fail) Generic Propagator Tests > Define Generic Propagator Handler > should support multiple handlers with different critics [5.74ms]
(fail) Generic Propagator Tests > Match Cells Prototype > match_cells_prototype should create a matching propagator [2.28ms]
(fail) Generic Propagator Tests > String Predicates > p_is_string should correctly identify strings [0.56ms]
(fail) Generic Propagator Tests > String Predicates > ce_is_string should work as cell expression [0.43ms]
(fail) Generic Propagator Tests > Propagator to Handler Network > should work with boolean operations [0.65ms]
(fail) Generic Propagator Tests > Propagator to Handler Network > should work with reactive updates [0.93ms]

 220 pass
 75 fail
 11 errors
 716 expect() calls
Ran 295 tests across 33 files. [5.76s]
